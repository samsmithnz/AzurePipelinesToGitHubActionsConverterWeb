name: "Pipelines to Actions website CI/CD"

on: [push]

jobs:
  build:
    runs-on: windows-latest    
    env:
      buildVersion: 1.0.0.0 #The initial build version, but this is updated below
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true #Allow us to set an environment variable in the PowerShell script to set the package version (technically deprecated)

    steps:
    - uses: actions/checkout@v1
    - name: Custom script to create a unique application version number for this build
      run: |
        Write-Host "Generating Build Number"
        #Get the version from the csproj file
        $xml = [Xml] (Get-Content PipelinesToActions/PipelinesToActions/PipelinesToActionsWeb.csproj)
        $initialVersion = [Version] $xml.Project.PropertyGroup.Version
        Write-Host "Initial Version: " $version
        $spliteVersion = $initialVersion -Split "\."
        #Get the build number (number of days since January 1, 2000)
        $baseDate = [datetime]"01/01/2000"
        $currentDate = $(Get-Date)
        $interval = (NEW-TIMESPAN -Start $baseDate -End $currentDate)
        $buildNumber = $interval.Days
        #Get the revision number (number seconds (divided by two) into the day on which the compilation was performed)
        $StartDate=[datetime]::Today
        $EndDate=(GET-DATE)
        $revisionNumber = [math]::Round((New-TimeSpan -Start $StartDate -End $EndDate).TotalSeconds / 2,0)
        #Final version number
        $finalBuildVersion = "$($spliteVersion[0]).$($spliteVersion[1]).$($buildNumber).$($revisionNumber)"
        Write-Host "Major.Minor,Build,Revision"
        Write-Host "Final build number: " $finalBuildVersion
        #Writing final version number back to Github variable
        Write-Host "Writing final version $finalBuildVersion back to Github variable"
        echo "::set-env name=buildVersion::$finalBuildVersion"
      shell: powershell
      
    #Build and test service   
    #- name: Run automated unit and integration tests
    #  run: dotnet build AzurePipelinesToGitHubActionsConverterWeb/AzurePipelinesToGitHubActionsConverterWeb/AzurePipelinesToGitHubActionsConverterWeb.csproj --configuration Release

    #Publish dotnet objects
    - name: DotNET Publish Web Site
      run: dotnet publish PipelinesToActions/PipelinesToActions/PipelinesToActionsWeb.csproj --configuration Release -p:Version=${{env.buildVersion}}
    
    #Publish build artifacts to GitHub
    - name: Upload website build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: webapp
        path: PipelinesToActions/PipelinesToActions/bin/Release/netcoreapp3.0/publish
  
  #Deploy the artifacts to Azure
  deploy:
    runs-on: windows-latest
    needs: build 
    #Only deploy if running off the master branch - we don't want to deploy off feature branches
    if: github.ref == 'refs/heads/master'
    
    steps:
    # Login with the secret SP details
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}
        
    #Download the artifacts from GitHub
    - name: Download webapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: webapp
            
    #Deploy service and website to Azure staging slots
    - name: Deploy web service to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: pipelinestoactions
        package: webapp
        slot-name: production
